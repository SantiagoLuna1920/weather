{"version":3,"sources":["components/promise.js","components/weatherLoots.js","weather.js","index.js"],"names":["promise","lat","lon","a","fetch","res","json","data","img","clouds","all","city","name","id","country","sys","description","weather","icon","cloud","main","wind","speed","pressure","temp","WeatherLoots","useState","aux","grade","temps","settemps","className","src","alt","toFixed","faWind","faCloud","faTemperatureLow","onClick","Weather","value","setValue","useEffect","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","then","catch","console","error","map","element","divRoot","document","querySelector","ReactDOM","render"],"mappings":"0MAAaA,EAAO,uCAAG,WAAQC,EAAKC,GAAb,mBAAAC,EAAA,sEAEH,mCAFG,SAGDC,MAAM,yDAAD,OADP,mCACO,gBAAyEF,EAAzE,gBAAoFD,IAHxF,cAGbI,EAHa,gBAIAA,EAAIC,OAJJ,cAIbC,EAJa,OAKbC,EAAM,CACZ,CACAC,OAAQF,EAAKE,OAAOC,IACpBC,KAAMJ,EAAKK,KACXC,GAAIN,EAAKM,GACTC,QAASP,EAAKQ,IAAID,QAClBE,YAAaT,EAAKU,QAAQ,GAAGD,YAC7BE,KAAMX,EAAKU,QAAQ,GAAGC,KACtBC,MAAOZ,EAAKU,QAAQ,GAAGG,KACvBC,KAAMd,EAAKc,KAAKC,MAChBC,SAAUhB,EAAKa,KAAKG,SACpBC,KAAMjB,EAAKa,KAAKI,OAhBG,kBAoBZhB,GApBY,2DAwBZ,6EAxBY,0DAAH,wD,qBCIPiB,EAAe,SAAC,GAA0E,IAAvEd,EAAsE,EAAtEA,KAAMF,EAAgE,EAAhEA,OAAQK,EAAwD,EAAxDA,QAASE,EAA+C,EAA/CA,YAAaE,EAAkC,EAAlCA,KAAMG,EAA4B,EAA5BA,KAAME,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,KAAY,EAE5EE,mBAAS,CACnCnB,KAAM,CAACiB,EAAK,QACZG,KAAK,EACLC,MAAO,UAL+F,mBAE/FC,EAF+F,KAExFC,EAFwF,KAyBtG,OACA,sBAAKC,UAAU,YAAf,UACA,sBAAKA,UAAU,oBAAf,UACA,6CACA,uCAAQpB,EAAR,aAAiBG,QAEjB,sBAAKiB,UAAU,gBAAf,UACA,sBAAKA,UAAU,iBAAf,UACA,qBAAKC,IAAG,2CAAwCd,EAAxC,WAAyDe,IAAK,gBACtE,oBAAGF,UAAU,SAAb,oBAA4BF,EAAMtB,KAAK,GAAG2B,QAAQ,IAAlD,IAA0D,sBAAMH,UAAU,SAAhB,mBAA+BF,EAAMD,eAE/F,sBAAKG,UAAU,iBAAf,UACA,mBAAGA,UAAU,YAAb,oBAA8Bf,EAA9B,OACA,8BAAG,cAAC,IAAD,CAAiBE,KAAOiB,MAA3B,IAAuC,sBAAMJ,UAAU,YAAhB,yBAAvC,IAAuFV,EAAvF,UACA,8BAAG,cAAC,IAAD,CAAiBH,KAAOkB,MAA3B,IAAwC,sBAAML,UAAU,YAAhB,qBAAxC,IAAoFtB,EAApF,QACA,8BAAG,cAAC,IAAD,CAAiBS,KAAOmB,MAAqB,sBAAMN,UAAU,YAAhB,uBAAhD,IAA8FR,EAA9F,eAIA,qBAAKQ,UAAU,oBAAf,SACA,wBAAQO,QArCQ,WAAO,IACf/B,EADc,YACLsB,EAAMtB,KADD,MAElBsB,EAAMF,IACVG,EAAS,CACTvB,KAAM,CAAU,EAAPA,EAAS,EAAM,IACxBoB,KAAK,EACLC,MAAO,UAGPE,EAAS,CACTvB,KAAM,CAAiB,GAAdA,EAAO,IAAS,GACzBoB,KAAK,EACLC,MAAO,WAyBP,uCC7CaW,EAAU,WAAO,IAAD,EAEHb,mBAAS,IAFN,mBAEtBc,EAFsB,KAEfC,EAFe,KAc7B,OAJAC,qBAAU,WAPaC,UAAUC,YAAYC,oBAAmB,YAAmB,IAAfC,EAAc,EAAdA,OACpE,OAAO9C,EAAS8C,EAAOC,SAAUD,EAAOE,WACvCC,KAAMR,GACNS,MAAOC,QAAQC,YAMd,IAGF,mCACEZ,EAAMa,KAAI,SAAAC,GACZ,OAAO,cAAC,EAAD,eAAsCA,GAAlBA,EAAQzC,UChB7B0C,EAAUC,SAASC,cAAc,SAEvCC,IAASC,OAAO,cAAC,EAAD,IAAaJ,K","file":"static/js/main.2d3a11c0.chunk.js","sourcesContent":["export const promise = async ( lat, lon ) => {\n    try {\n    const api_key = \"98f0cb7d475350e79b689f9907ca4a8f\"\n    const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?appid=${api_key}&lon=${lon}&lat=${lat}`)\n    const data = await res.json()\n    const img = [\n    {\n    clouds: data.clouds.all,\n    city: data.name,\n    id: data.id,\n    country: data.sys.country,\n    description: data.weather[0].description,\n    icon: data.weather[0].icon,\n    cloud: data.weather[0].main,\n    wind: data.wind.speed,\n    pressure: data.main.pressure,\n    temp: data.main.temp\n    }\n    ]\n    \n    return img\n    \n    } catch (error) {\n    \n    return \"No se pudo conectar al api, tu navegador no soporta el tipo de ubicacion.\"\n    \n    }\n    }","import React, { useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTemperatureLow, faWind, faCloud } from '@fortawesome/free-solid-svg-icons'\n\nexport const WeatherLoots = ( { city, clouds, country, description, icon, wind, pressure, temp } ) => {\n\nconst [temps, settemps] = useState({\ndata: [temp-273.15],\naux: true,\ngrade: \"°C\"\n})\n\nconst Degrees = () => {\nconst [ data ] = temps.data\nif (temps.aux) {\nsettemps({\ndata: [( data * 9/5 ) + 32 ],\naux: false,\ngrade: \"°F\"\n})\n} else {\nsettemps({\ndata: [( data - 32 ) * 5/9 ],\naux: true,\ngrade: \"°C\"\n})\n}\n}\n\nreturn (\n<div className=\"container\">\n<div className=\"container-weather\">\n<h1>Weather App</h1>\n<h2>{`${city}, ${country}`}</h2>\n</div>\n<div className=\"container-two\">\n<div className=\"container-icon\">\n<img src={ `http://openweathermap.org/img/wn/${ icon }@2x.png` } alt={\"Image cloud\"} />\n<p className=\"p-icon\">{ `${ temps.data[0].toFixed(2) }` } <span className=\"span-p\">{ `${ temps.grade }` }</span></p>\n</div>\n<div className=\"container-info\">\n<p className=\"colortext\">{`\"${description}\"`}</p>\n<p><FontAwesomeIcon icon={ faWind } /> <span className=\"colortext\">Wind speed:</span> {wind} m/s</p>\n<p><FontAwesomeIcon icon={ faCloud } /> <span className=\"colortext\">Clouds:</span> {clouds} %</p>\n<p><FontAwesomeIcon icon={ faTemperatureLow } /><span className=\"colortext\">Pressure:</span> {pressure} mb</p>\n</div>\n</div>\n\n<div className=\"cointainer-button\">\n<button onClick={ Degrees }>DEGREES °F/°C</button>\n</div>\n</div>\n)\n}","import React, { useEffect, useState } from 'react'\nimport { promise } from './components/promise';\nimport { WeatherLoots } from './components/weatherLoots';\n\nexport const Weather = () => {\n\nconst [value, setValue] = useState([])\nconst eather = () => { navigator.geolocation.getCurrentPosition(( { coords } ) => {\nreturn promise( coords.latitude, coords.longitude )\n.then( setValue )\n.catch( console.error )\n}); \n}\n\nuseEffect(()=> {\neather()\n},[]) \n\nreturn (\n<>\n{ value.map(element=> {\nreturn <WeatherLoots key={ element.id } { ...element } />\n}) }\n</>\n)\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Weather } from './weather';\n\nconst divRoot = document.querySelector(\"#root\");\n\nReactDOM.render(<Weather />, divRoot);"],"sourceRoot":""}